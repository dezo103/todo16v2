{"version":3,"sources":["api/todolists-api.ts","reportWebVitals.ts","utils/error-utils.ts","features/Auth/auth-reducer.ts","app/app-reducer.ts","features/TodolistsList/tasks-reducer.ts","features/TodolistsList/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/Auth/selectors.ts","features/TodolistsList/TodolistsList.tsx","features/TodolistsList/index.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Auth/Login.tsx","utils/redux-utils.ts","app/selectors.ts","app/App.tsx","app/store.ts","index.tsx"],"names":["TaskStatuses","TaskPriorities","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","model","authAPI","data","handleServerAppError","dispatch","messages","length","setAppErrorAC","error","setAppStatusAC","status","handleServerNetworkError","message","loginTC","createAsyncThunk","param","thunkAPI","a","res","resultCode","rejectWithValue","errors","fieldsErrors","undefined","logoutTC","slice","createSlice","name","initialState","isLoggedIn","reducers","setIsLoggedInAC","state","action","payload","value","extraReducers","builder","addCase","fulfilled","authReducer","reducer","actions","initializeAppTC","isInitialized","appReducer","fetchTasksTC","tasks","items","removeTaskTC","addTaskTC","item","updateTaskTC","getState","task","find","t","apiModel","deadline","description","priority","startDate","asyncActions","tasksReducer","todolistActions","addTodolistTC","todolist","removeTodolistTC","fetchTodolistsTC","todolists","forEach","tl","index","findIndex","splice","todoListId","unshift","changeTodolistEntityStatusAC","changeTodolistTitleTC","changeTodolistFilterAC","filter","entityStatus","map","todolistsReducer","AddItemForm","React","memo","addItem","disabled","console","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","style","marginLeft","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","className","position","Checkbox","top","right","size","Delete","fontSize","Todolist","demo","useDispatch","useEffect","thunk","taskActions","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","Paper","padding","removeTodolist","paddingTop","Button","selectIsLoggedIn","auth","TodolistsList","useSelector","changeStatus","newTitle","addTodolist","Grid","container","spacing","flexWrap","overflowX","paddingBottom","allTodolistTasks","width","to","todolistAsyncActions","taskAsyncActions","Alert","forwardRef","ref","elevation","ErrorSnackbar","app","handleClose","event","reason","Snackbar","open","autoHideDuration","onClose","severity","sx","Login","authSelectors","formik","useFormik","initialValues","email","password","rememberMe","validate","values","test","onSubmit","formikHelpers","rejected","match","setFieldError","field","justifyContent","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","type","FormControlLabel","control","selectStatus","selectIsInitialized","App","appSelectors","AppBar","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","maxWidth","path","element","textAlign","CircularProgress","rootReducer","combineReducers","store","configureStore","middleware","getDefaultMiddleware","prepend","thunkMiddleware","concat","logger","window","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af5badc9.chunk.js","sourcesContent":["import axios, { AxiosResponse } from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '8898ea91-03a8-4dfb-a060-ee03c44fe9f7'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TodolistType }>>>('todo-lists', {title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<{ title: string }, AxiosResponse<ResponseType>>(`todo-lists/${id}`, {title});\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, title: string) {\r\n        return instance.post<{ title: string }, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks`, {title});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<UpdateTaskModelType, AxiosResponse<ResponseType<{ item: TaskType }>>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<LoginParamsType, AxiosResponse<ResponseType<{userId: number}>>>(`auth/login`, data)\r\n    },\r\n    me() {\r\n        return instance.get<ResponseType<ResponseMeType>>(`auth/me`)\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseType>(`auth/login`)\r\n    }\r\n}\r\n\r\n\r\n// types\r\ntype ResponseMeType = {\r\n    id: number\r\n    email: string\r\n    login: string\r\n}\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n    captcha?: string\r\n}\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\n// export type ResponseType<D = {}> = {\r\n//     resultCode: number\r\n//     messages: Array<string>\r\n//     fieldsErrors?: Array<string>\r\n//     data: D\r\n// }\r\nexport type FieldErrorType = {field: string, error: string}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    fieldsErrors?: Array<FieldErrorType>\r\n    data: D\r\n}\r\n\r\n\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\n\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\n\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../app/app-reducer'\r\nimport {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message :'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, FieldErrorType, LoginParamsType} from \"../../api/todolists-api\";\r\nimport {handleServerAppError, handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n// thunks\r\n\r\nexport const loginTC =\r\n    createAsyncThunk<undefined, LoginParamsType, { rejectValue: { errors: Array<string>, fieldsErrors?: Array<FieldErrorType> } }>('auth/login', async (param, thunkAPI) => {\r\n        thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n        try {\r\n            const res = await authAPI.login(param)\r\n            if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({status: \"succeeded\"}))\r\n                return\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch)\r\n                return thunkAPI.rejectWithValue({errors: res.data.messages, fieldsErrors: res.data.fieldsErrors})\r\n            }\r\n        } catch (err: any) {\r\n            const error: AxiosError = err\r\n            handleServerNetworkError(error, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue(({errors: [error.message], fieldsErrors: undefined}))\r\n        }\r\n    })\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (param, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await authAPI.logout()\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: \"auth\",\r\n    initialState: {\r\n        isLoggedIn: false\r\n    },\r\n    reducers: {\r\n        setIsLoggedInAC(state, action: PayloadAction<{ value: boolean }>) {\r\n            state.isLoggedIn = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(loginTC.fulfilled, (state) => {\r\n                state.isLoggedIn = true\r\n            })\r\n            .addCase(logoutTC.fulfilled, (state) => {\r\n                state.isLoggedIn = false\r\n            })\r\n    },\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n","import {authAPI} from \"../api/todolists-api\";\r\nimport {setIsLoggedInAC} from \"../features/Auth/auth-reducer\";\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp', async (param, {dispatch}) => {\r\n        const res = await authAPI.me()\r\n        if (res.data.resultCode === 0) {\r\n            dispatch(setIsLoggedInAC({value: true}));\r\n        } else {\r\n\r\n        }\r\n})\r\n\r\nconst slice = createSlice({\r\n    name: \"app\",\r\n    initialState: {\r\n        status: 'idle',\r\n        error: null,\r\n        isInitialized: false\r\n    } as InitialStateType,\r\n    reducers: {\r\n        setAppErrorAC(state, action: PayloadAction<{ error: string | null }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatusType }>) {\r\n            state.status = action.payload.status\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state) => {\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    // происходит ли сейчас взаимодействие с сервером\r\n    status: RequestStatusType\r\n    // если ошибка какая-то глобальная произойдёт - мы запишем текст ошибки сюда\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n//export type SetAppInitializedActionType = ReturnType<typeof setIsInitializedAC>\r\n\r\n\r\n","import {todolistActions} from './'\r\nimport {TaskPriorities, TaskStatuses, TaskType, todolistsAPI, UpdateTaskModelType} from '../../api/todolists-api'\r\nimport {setAppStatusAC} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice} from \"@reduxjs/toolkit\";\r\nimport {AxiosError} from \"axios\";\r\nimport {AppRootStateType} from \"../../utils/types\";\r\n\r\nconst initialState: TasksStateType = {}\r\n\r\nconst fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.getTasks(todolistId)\r\n    const tasks = res.data.items\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {tasks, todolistId}\r\n})\r\n\r\nconst removeTaskTC = createAsyncThunk('tasks/removeTask', async (param: { taskId: string, todolistId: string }, thunkAPI) => {\r\n    const res = await todolistsAPI.deleteTask(param.todolistId, param.taskId)\r\n    return {taskId: param.taskId, todolistId: param.todolistId}\r\n})\r\n\r\nconst addTaskTC = createAsyncThunk('tasks/addTask', async (param: { title: string, todolistId: string }, thunkAPI) => {\r\n    thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.createTask(param.todolistId, param.title)\r\n        if (res.data.resultCode === 0) {\r\n            thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            return res.data.data.item\r\n        } else {\r\n            handleServerAppError(res.data, thunkAPI.dispatch);\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, thunkAPI.dispatch)\r\n        return thunkAPI.rejectWithValue({})\r\n    }\r\n})\r\n\r\nconst updateTaskTC = createAsyncThunk('task/updateTask',\r\n    async (param: { taskId: string, model: UpdateDomainTaskModelType, todolistId: string }, thunkAPI) => {\r\n\r\n        const state = thunkAPI.getState() as AppRootStateType\r\n        const task = state.tasks[param.todolistId].find(t => t.id === param.taskId)\r\n        if (!task) {\r\n            return thunkAPI.rejectWithValue('task not found in the state')\r\n        }\r\n\r\n        const apiModel: UpdateTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...param.model\r\n        }\r\n\r\n        try {\r\n            const res = await todolistsAPI.updateTask(param.todolistId, param.taskId, apiModel)\r\n            if (res.data.resultCode === 0) {\r\n                return param\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch);\r\n                return thunkAPI.rejectWithValue({})\r\n            }\r\n        } catch (err: any) {\r\n            const error: AxiosError = err\r\n            handleServerNetworkError(error, thunkAPI.dispatch)\r\n            return thunkAPI.rejectWithValue({})\r\n        }\r\n    })\r\n\r\nexport const asyncActions = {\r\n    fetchTasksTC,\r\n    removeTaskTC,\r\n    addTaskTC,\r\n    updateTaskTC\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(todolistActions.addTodolistTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(todolistActions.removeTodolistTC.fulfilled, (state, action) => {\r\n                delete state[action.payload.id]\r\n            })\r\n            .addCase(todolistActions.fetchTodolistsTC.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach((tl: any) => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n            .addCase(fetchTasksTC.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(removeTaskTC.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id == action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTaskTC.fulfilled, (state, action) => {\r\n                state[action.payload.todoListId].unshift(action.payload)\r\n            })\r\n            .addCase(updateTaskTC.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const index = tasks.findIndex(t => t.id == action.payload.taskId)\r\n                if (index > -1) {\r\n                    tasks[index] = {...tasks[index], ...action.payload.model}\r\n                }\r\n            })\r\n    }\r\n})\r\n\r\nexport const tasksReducer = slice.reducer\r\n\r\n// export const {\r\n//     //removeTaskAC,\r\n//     //addTaskAC,\r\n//     //updateTaskAC,\r\n// } = slice.actions\r\n\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {handleServerNetworkError} from \"../../utils/error-utils\";\r\nimport {AxiosError} from \"axios\";\r\n\r\n\r\n// thunks\r\n\r\nconst fetchTodolistsTC = createAsyncThunk('todolists/fetchTodolists', async (param, {dispatch, rejectWithValue}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.getTodolists()\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {todolists: res.data}\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(error)\r\n    }\r\n})\r\n\r\nconst removeTodolistTC = createAsyncThunk('todolists/removeTodolists', async (param: { todolistId: string }, {\r\n    dispatch,\r\n    rejectWithValue\r\n}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    dispatch(changeTodolistEntityStatusAC({id: param.todolistId, status: 'loading'}))\r\n    try {\r\n        const res = await todolistsAPI.deleteTodolist(param.todolistId)\r\n        dispatch(setAppStatusAC({status: 'succeeded'}))\r\n        return {id: param.todolistId}\r\n    } catch (err: any) {\r\n        const error: AxiosError = err\r\n        handleServerNetworkError(error, dispatch)\r\n        return rejectWithValue(error)\r\n    }\r\n})\r\n\r\nconst addTodolistTC = createAsyncThunk('todolists/addTodolists', async (param: { title: string }, {dispatch}) => {\r\n    dispatch(setAppStatusAC({status: 'loading'}))\r\n    const res = await todolistsAPI.createTodolist(param.title)\r\n    dispatch(setAppStatusAC({status: 'succeeded'}))\r\n    return {todolist: res.data.data.item}\r\n})\r\n\r\nconst changeTodolistTitleTC = createAsyncThunk('todolists/changeTodolistTitle', async (param: { id: string, title: string }, {dispatch}) => {\r\n    await todolistsAPI.updateTodolist(param.id, param.title)\r\n    return {id: param.id, title: param.title}\r\n})\r\n\r\nexport const asyncActions = {\r\n    fetchTodolistsTC,\r\n    removeTodolistTC,\r\n    addTodolistTC,\r\n    changeTodolistTitleTC\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: \"todolists\",\r\n    initialState: [] as Array<TodolistDomainType>,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            state[index].filter = action.payload.filter\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, status: RequestStatusType }>) {\r\n            const index = state.findIndex(tl => tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state[index].entityStatus = action.payload.status\r\n            }\r\n        },\r\n    },\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(fetchTodolistsTC.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n            })\r\n            .addCase(removeTodolistTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                if (index > -1) {\r\n                    state.splice(index, 1)\r\n                }\r\n            })\r\n            .addCase(addTodolistTC.fulfilled, (state, action) => {\r\n                state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n            })\r\n            .addCase(changeTodolistTitleTC.fulfilled, (state, action) => {\r\n                const index = state.findIndex(tl => tl.id === action.payload.id)\r\n                state[index].title = action.payload.title\r\n            })\r\n    }\r\n})\r\n\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const {\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n} = slice.actions\r\n\r\n\r\n// types\r\n\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistTC.fulfilled>;\r\n\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, { ChangeEvent, KeyboardEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport { AddBox } from '@mui/icons-material';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function ({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log('AddItemForm called')\r\n\r\n    let [title, setTitle] = useState('')\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== '') {\r\n            addItem(title);\r\n            setTitle('');\r\n        } else {\r\n            setError('Title is required');\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled} style={{marginLeft: '5px'}}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { ChangeEvent, useState } from 'react';\r\nimport TextField from '@mui/material/TextField';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log('EditableSpan called');\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport { Delete } from '@mui/icons-material';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}\r\n                style={{position: 'relative'}}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler} style={{position: 'absolute', top: '2px', right: '2px'}} size={'small'}>\r\n            <Delete fontSize={'small'}/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, { useCallback, useEffect } from 'react'\r\nimport { AddItemForm } from '../../../components/AddItemForm/AddItemForm'\r\nimport { EditableSpan } from '../../../components/EditableSpan/EditableSpan'\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Button from '@mui/material/Button';\r\nimport { Delete } from '@mui/icons-material';\r\nimport { Task } from './Task/Task'\r\nimport { TaskStatuses, TaskType } from '../../../api/todolists-api'\r\nimport { FilterValuesType, TodolistDomainType } from '../todolists-reducer'\r\nimport { useDispatch } from 'react-redux'\r\nimport {taskActions} from \"../index\";\r\nimport {Paper} from \"@mui/material\";\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = taskActions.fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <Paper style={{ position: 'relative', padding: '10px'}}>\r\n        <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}\r\n        style={{ position: 'absolute', right: '5px', top: '5px' }}>\r\n            <Delete/>\r\n        </IconButton>\r\n        <h3>\r\n            <EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n            { !tasksForTodolist.length && <div style={{color: 'gray', padding: '8px 0'}}>No task</div> }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'inherit'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </Paper>\r\n})\r\n\r\n\r\n","import {AppRootStateType} from \"../../utils/types\";\r\n\r\n\r\nexport const selectIsLoggedIn = (state: AppRootStateType) => state.auth.isLoggedIn","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {changeTodolistFilterAC, FilterValuesType, TodolistDomainType} from './todolists-reducer'\r\nimport {TasksStateType} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport Grid from '@mui/material/Grid';\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {selectIsLoggedIn} from \"../Auth/selectors\";\r\nimport {taskActions, todolistActions} from \"./\";\r\nimport {AppRootStateType} from \"../../utils/types\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector(selectIsLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = todolistActions.fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (taskId: string, todolistId: string) {\r\n        const thunk = taskActions.removeTaskTC({taskId, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = taskActions.addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = taskActions.updateTaskTC({taskId: id, model: {status}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = taskActions.updateTaskTC({taskId: id, model: {title: newTitle}, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = todolistActions.removeTodolistTC({todolistId: id})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = todolistActions.changeTodolistTitleTC({id, title})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = todolistActions.addTodolistTC({title})\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Navigate to={\"login\"}/>\r\n    }\r\n\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{flexWrap: 'nowrap', overflowX: \"scroll\", paddingBottom: '24px'}}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id} >\r\n                        <div style={{width: '300px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {asyncActions as taskAsyncActions} from \"./tasks-reducer\";\r\nimport {asyncActions as todolistAsyncActions} from \"./todolists-reducer\";\r\nimport {TodolistsList} from './TodolistsList'\r\n\r\nconst todolistActions = {\r\n    ...todolistAsyncActions,\r\n}\r\n\r\nconst taskActions = {\r\n    ...taskAsyncActions,\r\n}\r\n\r\nexport {\r\n    taskActions,\r\n    todolistActions,\r\n    TodolistsList\r\n}","import React from 'react';\r\nimport Snackbar from '@mui/material/Snackbar';\r\nimport MuiAlert, { AlertProps } from '@mui/material/Alert';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setAppErrorAC } from '../../app/app-reducer';\r\nimport {AppRootStateType} from \"../../utils/types\";\r\n\r\nconst Alert = React.forwardRef<HTMLDivElement, AlertProps>(function Alert(\r\n    props, ref) {\r\n    return <MuiAlert elevation={6} ref={ref} variant=\"filled\" {...props} />;\r\n});\r\n\r\n\r\nexport function ErrorSnackbar() {\r\n\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error)\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        dispatch(setAppErrorAC({error: null} ))\r\n    };\r\n\r\n    return (\r\n        <Snackbar open={error !== null} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\" sx={{width: '100%'}}>\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    );\r\n}\r\n","import React from 'react'\r\nimport Grid from '@mui/material/Grid';\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport FormLabel from '@mui/material/FormLabel';\r\nimport TextField from '@mui/material/TextField';\r\nimport Button from '@mui/material/Button';\r\nimport {FormikHelpers, useFormik} from \"formik\";\r\nimport {loginTC} from \"./auth-reducer\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {Navigate} from 'react-router-dom'\r\nimport {authSelectors} from \"./index\";\r\nimport {useAppDispatch} from \"../../utils/redux-utils\";\r\n\r\ntype FormValuesType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n}\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\n\r\nexport const Login = () => {\r\n\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        validate: (values) => {\r\n            const errors: FormikErrorType = {};\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Required';\r\n            } else if (values.password.length < 3) {\r\n                errors.password = 'Must be 3 characters or more';\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: async (values, formikHelpers: FormikHelpers<FormValuesType>) => {\r\n            const action = await dispatch(loginTC(values))\r\n            if (loginTC.rejected.match(action)) {\r\n                if (action.payload?.fieldsErrors?.length) {\r\n                    const error = action.payload?.fieldsErrors[0]\r\n                    formikHelpers.setFieldError(error.field, error.error)\r\n                } else {\r\n\r\n                }\r\n\r\n            }\r\n\r\n            //formik.resetForm();\r\n        },\r\n    })\r\n\r\n    if(isLoggedIn) {\r\n        return <Navigate to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justifyContent={'center'}>\r\n        <Grid item justifyContent={'center'}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>To log in get registered\r\n                            <a href={'https://social-network.samuraijs.com/'}\r\n                               target={'_blank'}> here\r\n                            </a>\r\n                        </p>\r\n                        <p>or use common test account credentials:</p>\r\n                        <p>Email: free@samuraijs.com</p>\r\n                        <p>Password: free</p>\r\n                    </FormLabel>\r\n\r\n                    <FormGroup>\r\n                        <TextField label=\"Email\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('email')}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.email}</div>}\r\n                        <TextField type=\"password\" label=\"Password\"\r\n                                   margin=\"normal\"\r\n                                   {...formik.getFieldProps('password')}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password &&\r\n                            <div style={{color: \"red\"}}>{formik.errors.password}</div>}\r\n                        <FormControlLabel label={'Remember me'} control={<Checkbox\r\n                            {...formik.getFieldProps('rememberMe')}\r\n                        />}/>\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                            Login\r\n                        </Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import {useDispatch} from \"react-redux\";\r\nimport {AppDispatchType} from \"./types\";\r\n\r\nexport const useAppDispatch = () => useDispatch<AppDispatchType>()","import {AppRootStateType} from \"../utils/types\";\r\n\r\nexport const selectStatus = (state: AppRootStateType) => state.app.status\r\nexport const selectIsInitialized = (state: AppRootStateType) => state.app.isInitialized","import React, {useEffect} from 'react'\r\nimport './App.css'\r\nimport {TodolistsList} from '../features/TodolistsList/'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {initializeAppTC} from './app-reducer'\r\nimport AppBar from '@mui/material/AppBar';\r\nimport Toolbar from '@mui/material/Toolbar';\r\nimport IconButton from '@mui/material/IconButton';\r\nimport Typography from '@mui/material/Typography';\r\nimport Button from '@mui/material/Button';\r\nimport Container from '@mui/material/Container';\r\nimport LinearProgress from '@mui/material/LinearProgress';\r\nimport {Menu} from '@mui/icons-material';\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {Login} from \"../features/Auth/Login\";\r\nimport {Navigate, Route, Routes} from 'react-router-dom'\r\nimport CircularProgress from \"@mui/material/CircularProgress\";\r\nimport {logoutTC} from \"../features/Auth/auth-reducer\";\r\nimport {authSelectors} from \"../features/Auth\";\r\nimport {appSelectors} from \"./index\";\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector(appSelectors.selectStatus)\r\n    const isInitialized = useSelector(appSelectors.selectIsInitialized)\r\n    const isLoggedIn = useSelector(authSelectors.selectIsLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '50%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    const logoutHandler = () => {\r\n        dispatch(logoutTC())\r\n    }\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ErrorSnackbar/>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                        <Menu/>\r\n                    </IconButton>\r\n                    <Typography variant=\"h6\">\r\n                        News\r\n                    </Typography>\r\n                    { isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Logout</Button>}\r\n                </Toolbar>\r\n                {status === 'loading' && <LinearProgress/>}\r\n            </AppBar>\r\n            <Container fixed style={{maxWidth: '100%'}}>\r\n                <Routes>\r\n                    <Route path=\"/\" element={<TodolistsList demo={demo}/>}/>\r\n                    <Route path=\"login\" element={<Login/>}/>\r\n                    <Route path=\"/404\" element={<h1 style={{textAlign: \"center\"}}>404: PAGE NOT FOUND</h1>}/>\r\n                    <Route path=\"*\" element={<Navigate to=\"/404\"/>}/>\r\n                </Routes>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {combineReducers} from 'redux'\r\nimport thunkMiddleware from 'redux-thunk'\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from \"../features/Auth/auth-reducer\";\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {useDispatch} from \"react-redux\";\r\n\r\n// объединяя reducer-ы с помощью combineReducers,\r\n// мы задаём структуру нашего единственного объекта-состояния\r\nexport const rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n// непосредственно создаём store\r\n\r\n//export const store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer,\r\n    middleware: (getDefaultMiddleware) =>\r\n        getDefaultMiddleware().prepend(thunkMiddleware).concat(logger)\r\n})\r\n\r\n// определить автоматически тип всего объекта состояния\r\n\r\n\r\n// а это, чтобы можно было в консоли браузера обращаться к store в любой момент\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport App from './app/App';\nimport {Provider} from 'react-redux';\nimport {store} from './app/store';\nimport {HashRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <HashRouter>\n                <App/>\n            </HashRouter>\n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}